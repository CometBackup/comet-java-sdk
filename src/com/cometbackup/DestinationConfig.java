
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* DestinationConfig
*/
public class DestinationConfig {
	@JsonProperty("Description")
	public String Description = "";

	//Unix timestamp in seconds
	@JsonProperty("CreateTime")
	public long CreateTime;

	//Unix timestamp in seconds
	@JsonProperty("ModifyTime")
	public long ModifyTime;

	//Custom commands to run before the job
	@JsonProperty("PreExec")
	public ArrayList<String> PreExec;

	//Custom commands to run after taking a disk snapshot
	@JsonProperty("ThawExec")
	public ArrayList<String> ThawExec;

	//Custom commands to run after the job
	@JsonProperty("PostExec")
	public ArrayList<String> PostExec;

	//One of the DESTINATIONTYPE_ constants
	@JsonProperty("DestinationType")
	public long DestinationType;

	//The URL for the target Comet Server Storage Role, including http/https and trailing slash
	@JsonProperty("CometServer")
	public String CometServer = "";

	@JsonProperty("CometBucket")
	public String CometBucket = "";

	@JsonProperty("CometBucketKey")
	public String CometBucketKey = "";

	@JsonProperty("S3Server")
	public String S3Server = "";

	@JsonProperty("S3UsesTLS")
	public boolean S3UsesTLS;

	@JsonProperty("S3AccessKey")
	public String S3AccessKey = "";

	@JsonProperty("S3SecretKey")
	public String S3SecretKey = "";

	@JsonProperty("S3BucketName")
	public String S3BucketName = "";

	@JsonProperty("S3Subdir")
	public String S3Subdir = "";

	@JsonProperty("S3CustomRegion")
	public String S3CustomRegion = "";

	//If true, use legacy v2 signing. If false (default), use modern v4 signing
	@JsonProperty("S3UsesV2Signing")
	public boolean S3UsesV2Signing;

	@JsonProperty("S3RemoveDeleted")
	public boolean S3RemoveDeleted;

	@JsonProperty("S3ObjectLockMode")
	public short S3ObjectLockMode;

	@JsonProperty("S3ObjectLockDays")
	public int S3ObjectLockDays;

	@JsonProperty("SFTPServer")
	public String SFTPServer = "";

	@JsonProperty("SFTPUsername")
	public String SFTPUsername = "";

	//The directory on the SFTP server in which data is stored.
	@JsonProperty("SFTPRemotePath")
	public String SFTPRemotePath = "";

	//One of the DESTINATION_SFTP_AUTHMODE_ constants
	@JsonProperty("SFTPAuthMode")
	public long SFTPAuthMode;

	//For use with DESTINATION_SFTP_AUTHMODE_PASSWORD only: the SSH password to connect with
	@JsonProperty("SFTPPassword")
	public String SFTPPassword = "";

	//For use with DESTINATION_SFTP_AUTHMODE_PRIVATEKEY only: the SSH private key to connect with, in OpenSSH format.
	@JsonProperty("SFTPPrivateKey")
	public String SFTPPrivateKey = "";

	//If true, then the SFTPCustomAuth_KnownHostsFile will be used to verify the remote SSH server's host key, using Trust
	//On First Use (TOFU).
	@JsonProperty("SFTPCustomAuth_UseKnownHostsFile")
	public boolean SFTPCustomAuth_UseKnownHostsFile;

	//If SFTPCustomAuth_UseKnownHostFile is true, the path to the SSH known_hosts file.
	@JsonProperty("SFTPCustomAuth_KnownHostsFile")
	public String SFTPCustomAuth_KnownHostsFile = "";

	@JsonProperty("FTPServer")
	public String FTPServer = "";

	@JsonProperty("FTPUsername")
	public String FTPUsername = "";

	@JsonProperty("FTPPassword")
	public String FTPPassword = "";

	//If true, store data in the default home directory given by the FTP server. If false, store data in the
	//FTPCustomBaseDirectory path.
	@JsonProperty("FTPBaseUseHomeDirectory")
	public boolean FTPBaseUseHomeDirectory;

	//If FTPBaseUseHomeDirectory is false, this field controls the path where data is stored.
	@JsonProperty("FTPCustomBaseDirectory")
	public String FTPCustomBaseDirectory = "";

	//Control whether this is plaintext FTP or secure FTPS by using one of the FTPS_MODE_ constants.
	@JsonProperty("FTPSMode")
	public int FTPSMode;

	@JsonProperty("FTPPort")
	public int FTPPort;

	//If set to zero, uses a system default value that is not unlimited.
	@JsonProperty("FTPMaxConnections")
	public int FTPMaxConnections;

	@JsonProperty("FTPAcceptInvalidSSL")
	public boolean FTPAcceptInvalidSSL;

	@JsonProperty("AZBAccountName")
	public String AZBAccountName = "";

	@JsonProperty("AZBAccountKey")
	public String AZBAccountKey = "";

	@JsonProperty("AZBContainer")
	public String AZBContainer = "";

	//The base URL for the Azure Blob Storage service. Leave blank to use the global default URL.
	@JsonProperty("AZBRealm")
	public String AZBRealm = "";

	@JsonProperty("AZBPrefix")
	public String AZBPrefix = "";

	@JsonProperty("LocalcopyPath")
	public String LocalcopyPath = "";

	//If logging in to a Windows network share (SMB/CIFS) is required, enter the username here.
	@JsonProperty("LocalcopyWinSMBUsername")
	public String LocalcopyWinSMBUsername = "";

	//If logging in to a Windows network share (SMB/CIFS) is required, enter the password here. The password may be hashed
	//as per the LocalcopyWinSMBPasswordFormat field.
	@JsonProperty("LocalcopyWinSMBPassword")
	public String LocalcopyWinSMBPassword = "";

	//One of the PASSWORD_FORMAT_ constants. It controls the hash format of the LocalcopyWinSMBPassword field.
	@JsonProperty("LocalcopyWinSMBPasswordFormat")
	public long LocalcopyWinSMBPasswordFormat;

	@JsonProperty("Swift")
	public SwiftDestinationLocation Swift;

	@JsonProperty("B2")
	public B2DestinationLocation B2;

	@JsonProperty("WebDav")
	public WebDavDestinationLocation WebDav;

	@JsonProperty("Storj")
	public StorjDestinationLocation Storj;

	//A list of underlying destinations, that will be combined and presented as one.
	@JsonProperty("SpanTargets")
	public ArrayList<DestinationLocation> SpanTargets;

	//If true, this Spanned destination will use a consistent hashing scheme
	//to immediately find specific files on exactly one of the target destinations.
	//In the Static Slots mode, the span targets cannot be moved or merged, and
	//the files must always remain in their original location.
	//
	//If false, the Spanned destination system will search all targets to find
	//the requested file. This is slightly slower, but allows you to freely merge,
	//split, and reorder the underlying destination locations.
	//
	//The default option is false.
	@JsonProperty("SpanUseStaticSlots")
	public boolean SpanUseStaticSlots;

	@JsonProperty("Tag")
	public String Tag = "";

	//One of the ENCRYPTIONMETHOD_ constants
	@JsonProperty("EncryptionKeyEncryptionMethod")
	public long EncryptionKeyEncryptionMethod;

	@JsonProperty("EncryptedEncryptionKey")
	public String EncryptedEncryptionKey = "";

	//Unix timestamp in seconds. If zero, the Storage Vault has not yet been initialized for the first time.
	@JsonProperty("RepoInitTimestamp")
	public long RepoInitTimestamp;

	//Storage Vault quota
	@JsonProperty("StorageLimitEnabled")
	public boolean StorageLimitEnabled;

	//Storage Vault quota
	@JsonProperty("StorageLimitBytes")
	public long StorageLimitBytes;

	@JsonProperty("Statistics")
	public DestinationStatistics Statistics;

	//Configure the retention policy for this Storage Vault. The rules will be applied to any snapshot inside this Storage
	//Vault, unless that snapshot belongs to a Protected Item source that has an overriding retention policy.
	@JsonProperty("DefaultRetention")
	public RetentionPolicy DefaultRetention;

	//The "Prevent users from viewing the actual storage type" option
	@JsonProperty("RebrandStorage")
	public boolean RebrandStorage;


	public DestinationConfig(){ }

	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	static public DestinationConfig fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,DestinationConfig.class);
	}

	public DestinationLocation GetEmbeddedDestinationLocation(){
		var ret = new DestinationLocation();
		ret.DestinationType = this.DestinationType;
		ret.CometServer = this.CometServer;
		ret.CometBucket = this.CometBucket;
		ret.CometBucketKey = this.CometBucketKey;
		ret.S3Server = this.S3Server;
		ret.S3UsesTLS = this.S3UsesTLS;
		ret.S3AccessKey = this.S3AccessKey;
		ret.S3SecretKey = this.S3SecretKey;
		ret.S3BucketName = this.S3BucketName;
		ret.S3Subdir = this.S3Subdir;
		ret.S3CustomRegion = this.S3CustomRegion;
		ret.S3UsesV2Signing = this.S3UsesV2Signing;
		ret.S3RemoveDeleted = this.S3RemoveDeleted;
		ret.S3ObjectLockMode = this.S3ObjectLockMode;
		ret.S3ObjectLockDays = this.S3ObjectLockDays;
		ret.SFTPServer = this.SFTPServer;
		ret.SFTPUsername = this.SFTPUsername;
		ret.SFTPRemotePath = this.SFTPRemotePath;
		ret.SFTPAuthMode = this.SFTPAuthMode;
		ret.SFTPPassword = this.SFTPPassword;
		ret.SFTPPrivateKey = this.SFTPPrivateKey;
		ret.SFTPCustomAuth_UseKnownHostsFile = this.SFTPCustomAuth_UseKnownHostsFile;
		ret.SFTPCustomAuth_KnownHostsFile = this.SFTPCustomAuth_KnownHostsFile;
		ret.FTPServer = this.FTPServer;
		ret.FTPUsername = this.FTPUsername;
		ret.FTPPassword = this.FTPPassword;
		ret.FTPBaseUseHomeDirectory = this.FTPBaseUseHomeDirectory;
		ret.FTPCustomBaseDirectory = this.FTPCustomBaseDirectory;
		ret.FTPSMode = this.FTPSMode;
		ret.FTPPort = this.FTPPort;
		ret.FTPMaxConnections = this.FTPMaxConnections;
		ret.FTPAcceptInvalidSSL = this.FTPAcceptInvalidSSL;
		ret.AZBAccountName = this.AZBAccountName;
		ret.AZBAccountKey = this.AZBAccountKey;
		ret.AZBContainer = this.AZBContainer;
		ret.AZBRealm = this.AZBRealm;
		ret.AZBPrefix = this.AZBPrefix;
		ret.LocalcopyPath = this.LocalcopyPath;
		ret.LocalcopyWinSMBUsername = this.LocalcopyWinSMBUsername;
		ret.LocalcopyWinSMBPassword = this.LocalcopyWinSMBPassword;
		ret.LocalcopyWinSMBPasswordFormat = this.LocalcopyWinSMBPasswordFormat;
		ret.Swift = this.Swift;
		ret.B2 = this.B2;
		ret.WebDav = this.WebDav;
		ret.Storj = this.Storj;
		ret.SpanTargets = this.SpanTargets;
		ret.SpanUseStaticSlots = this.SpanUseStaticSlots;
		ret.Tag = this.Tag;
		return ret;
	}
	public void SetEmbeddedDestinationLocation(DestinationLocation other){
		this.DestinationType = other.DestinationType;
		this.CometServer = other.CometServer;
		this.CometBucket = other.CometBucket;
		this.CometBucketKey = other.CometBucketKey;
		this.S3Server = other.S3Server;
		this.S3UsesTLS = other.S3UsesTLS;
		this.S3AccessKey = other.S3AccessKey;
		this.S3SecretKey = other.S3SecretKey;
		this.S3BucketName = other.S3BucketName;
		this.S3Subdir = other.S3Subdir;
		this.S3CustomRegion = other.S3CustomRegion;
		this.S3UsesV2Signing = other.S3UsesV2Signing;
		this.S3RemoveDeleted = other.S3RemoveDeleted;
		this.S3ObjectLockMode = other.S3ObjectLockMode;
		this.S3ObjectLockDays = other.S3ObjectLockDays;
		this.SFTPServer = other.SFTPServer;
		this.SFTPUsername = other.SFTPUsername;
		this.SFTPRemotePath = other.SFTPRemotePath;
		this.SFTPAuthMode = other.SFTPAuthMode;
		this.SFTPPassword = other.SFTPPassword;
		this.SFTPPrivateKey = other.SFTPPrivateKey;
		this.SFTPCustomAuth_UseKnownHostsFile = other.SFTPCustomAuth_UseKnownHostsFile;
		this.SFTPCustomAuth_KnownHostsFile = other.SFTPCustomAuth_KnownHostsFile;
		this.FTPServer = other.FTPServer;
		this.FTPUsername = other.FTPUsername;
		this.FTPPassword = other.FTPPassword;
		this.FTPBaseUseHomeDirectory = other.FTPBaseUseHomeDirectory;
		this.FTPCustomBaseDirectory = other.FTPCustomBaseDirectory;
		this.FTPSMode = other.FTPSMode;
		this.FTPPort = other.FTPPort;
		this.FTPMaxConnections = other.FTPMaxConnections;
		this.FTPAcceptInvalidSSL = other.FTPAcceptInvalidSSL;
		this.AZBAccountName = other.AZBAccountName;
		this.AZBAccountKey = other.AZBAccountKey;
		this.AZBContainer = other.AZBContainer;
		this.AZBRealm = other.AZBRealm;
		this.AZBPrefix = other.AZBPrefix;
		this.LocalcopyPath = other.LocalcopyPath;
		this.LocalcopyWinSMBUsername = other.LocalcopyWinSMBUsername;
		this.LocalcopyWinSMBPassword = other.LocalcopyWinSMBPassword;
		this.LocalcopyWinSMBPasswordFormat = other.LocalcopyWinSMBPasswordFormat;
		this.Swift = other.Swift;
		this.B2 = other.B2;
		this.WebDav = other.WebDav;
		this.Storj = other.Storj;
		this.SpanTargets = other.SpanTargets;
		this.SpanUseStaticSlots = other.SpanUseStaticSlots;
		this.Tag = other.Tag;
	}

}
