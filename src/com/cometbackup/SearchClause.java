
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* SearchClause
*/
public class SearchClause {
	//One of the SEARCHCLAUSE_ constants (e.g. empty-string if this is a rule, or "and"/"or" if there are ClauseChildren)
	@JsonProperty("ClauseType")
	public String ClauseType = "";

	//The field name to search. Check the specific API for more information about which fields are available for searching.
	//For use with ClauseType = SEARCHCLAUSE_RULE.
	@JsonProperty("RuleField")
	public String RuleField = "";

	//One of the SEARCHOPERATOR_ constants. The operator must match the type of the particular field. For use with
	//ClauseType = SEARCHCLAUSE_RULE.
	@JsonProperty("RuleOperator")
	public String RuleOperator = "";

	//The value to compare the field against.
	//- If the field is a string, any string is permissable.
	//- If the field is an integer, the integer should be cast to a base-10 string. There is currently no support for
	//fractional or floating-point numbers.
	//- If the field is a boolean, the following values can be used for true ("1", "t", "T", "true", "TRUE", "True") and
	//the following values can be used for false ("0", "f", "F", "false", "FALSE", "False").
	//For use with ClauseType = SEARCHCLAUSE_RULE.
	@JsonProperty("RuleValue")
	public String RuleValue = "";

	//If ClauseType is not SEARCHCLAUSE_RULE, the child rules will be applied according to the ClauseType (e.g. "and"/"or")
	@JsonProperty("ClauseChildren")
	public ArrayList<SearchClause> ClauseChildren;


	public SearchClause(){ }

	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	static public SearchClause fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,SearchClause.class);
	}

}
