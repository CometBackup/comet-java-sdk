
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* SSHConnection
*/
public class SSHConnection {
	@JsonProperty("SSHServer")
	public String SSHServer = "";

	@JsonProperty("SSHUsername")
	public String SSHUsername = "";

	//One of the SSHCONNECTION_AUTHMODE_ constants
	@JsonProperty("SSHAuthMode")
	public long SSHAuthMode;

	//For use with SSHCONNECTION_AUTHMODE_PASSWORD only: the SSH password to connect with
	@JsonProperty("SSHPassword")
	public String SSHPassword = "";

	//For use with SSHCONNECTION_AUTHMODE_PRIVATEKEY only: the SSH private key to connect with, in OpenSSH format.
	@JsonProperty("SSHPrivateKey")
	public String SSHPrivateKey = "";

	//If true, then the SSHCustomAuth_KnownHostsFile will be used to verify the remote SSH server's host key, using Trust
	//On First Use (TOFU).
	@JsonProperty("SSHCustomAuth_UseKnownHostsFile")
	public boolean SSHCustomAuth_UseKnownHostsFile;

	//If SSHCustomAuth_UseKnownHostsFile is true, the path to the SSH known_hosts file.
	@JsonProperty("SSHCustomAuth_KnownHostsFile")
	public String SSHCustomAuth_KnownHostsFile = "";


	public SSHConnection(){ }

	/**
	* @return JSON representation of the SSHConnection
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	/**
	* @param jsStr JSON representation of a SSHConnection
	* @return The deserialized SSHConnection
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	static public SSHConnection fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,SSHConnection.class);
	}

}
