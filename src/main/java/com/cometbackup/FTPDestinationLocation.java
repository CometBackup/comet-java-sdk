
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* FTPDestinationLocation
*/
public class FTPDestinationLocation {
	@JsonProperty("FTPServer")
	public String FTPServer = "";

	@JsonProperty("FTPUsername")
	public String FTPUsername = "";

	@JsonProperty("FTPPassword")
	public String FTPPassword = "";

	//If true, store data in the default home directory given by the FTP server. If false, store data in the
	//FTPCustomBaseDirectory path.
	@JsonProperty("FTPBaseUseHomeDirectory")
	public boolean FTPBaseUseHomeDirectory;

	//If FTPBaseUseHomeDirectory is false, this field controls the path where data is stored.
	@JsonProperty("FTPCustomBaseDirectory")
	public String FTPCustomBaseDirectory = "";

	//Control whether this is plaintext FTP or secure FTPS by using one of the FTPS_MODE_ constants.
	@JsonProperty("FTPSMode")
	public int FTPSMode;

	@JsonProperty("FTPPort")
	public int FTPPort;

	//If set to zero, uses a system default value that is not unlimited.
	@JsonProperty("FTPMaxConnections")
	public int FTPMaxConnections;

	@JsonProperty("FTPAcceptInvalidSSL")
	public boolean FTPAcceptInvalidSSL;


	public FTPDestinationLocation(){ }

	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	static public FTPDestinationLocation fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,FTPDestinationLocation.class);
	}

}
