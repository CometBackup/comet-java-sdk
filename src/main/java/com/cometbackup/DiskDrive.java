
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* DiskDrive
*/
public class DiskDrive {
	@JsonProperty("ID")
	public String ID = "";

	@JsonProperty("DeviceName")
	public String DeviceName = "";

	@JsonProperty("Caption")
	public String Caption = "";

	@JsonProperty("Model")
	public String Model = "";

	@JsonProperty("SerialNumber")
	public String SerialNumber = "";

	//Bytes
	@JsonProperty("Size")
	public long Size;

	@JsonProperty("Partitions")
	public ArrayList<Partition> Partitions;

	//For physical disks, this array will be empty. For virtual disks, RAID devices or Linux DM devices, this array may
	//contain the DeviceName of the parent device.
	@JsonProperty("DeviceParents")
	public ArrayList<String> DeviceParents;

	//See WINDISKFLAG_ constants
	@JsonProperty("Flags")
	public long Flags;


	// deprecated since Comet version 24.6.x This value is reported from the disk driver if available. Otherwise emulates a value based on modern LBA addressing. The field value is not used.
	@JsonProperty("Cylinders")
	public long Cylinders;


	// deprecated since Comet version 24.6.x This value is reported from the disk driver if available. Otherwise emulates a value based on modern LBA addressing. The field value is not used.
	@JsonProperty("Heads")
	public long Heads;


	// deprecated since Comet version 24.6.x This value is reported from the disk driver if available. Otherwise emulates a value based on modern LBA addressing. The field value is not used.
	@JsonProperty("Sectors")
	public long Sectors;

	@JsonProperty("SectorSize")
	public long SectorSize;

	//Used to indicate the partition conflicts on the disk.
	@JsonProperty("PartitionConflicts")
	public ArrayList<PartitionConflict> PartitionConflicts;


	public DiskDrive(){ }

	/**
	* @return JSON representation of the DiskDrive
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	/**
	* @param jsStr JSON representation of a DiskDrive
	* @return The deserialized DiskDrive
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	static public DiskDrive fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,DiskDrive.class);
	}

}
