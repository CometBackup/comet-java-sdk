
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* B2DestinationLocation B2DestinationLocation allows configuring connection settings for storage locations using the
* Backblaze B2 native API (DESTINATIONTYPE_B2).
*/
public class B2DestinationLocation {
	//Key ID
	@JsonProperty("AccountID")
	public String AccountID = "";

	//Application Key
	@JsonProperty("Key")
	public String Key = "";

	@JsonProperty("Bucket")
	public String Bucket = "";

	@JsonProperty("Prefix")
	public String Prefix = "";


	// deprecated since Comet version 21.9.7
	@JsonProperty("MaxConnections")
	public int MaxConnections;

	//Hide files instead of deleting them. This can be used for ransomware protection if (A) the B2 credentials have the
	//hideFile permission but not the deleteFile permission, and (B) you use the Backblaze B2 server-side lifecycle
	//policies to clean up old hidden files.
	@JsonProperty("HideDeletedFiles")
	public boolean HideDeletedFiles;


	public B2DestinationLocation(){ }

	/**
	* @return JSON representation of the B2DestinationLocation
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	/**
	* @param jsStr JSON representation of a B2DestinationLocation
	* @return The deserialized B2DestinationLocation
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	static public B2DestinationLocation fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,B2DestinationLocation.class);
	}

}
