
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* BackupRuleConfig A backup rule connects one source Protected Item and one destination Storage Vault, with multiple
* time schedules or event triggers
*/
public class BackupRuleConfig {
	@JsonProperty("Description")
	public String Description = "";

	//Unix timestamp in seconds
	@JsonProperty("CreateTime")
	public long CreateTime;

	//Unix timestamp in seconds. The caller is responsible for updating this themselves.
	@JsonProperty("ModifyTime")
	public long ModifyTime;

	//Custom commands to run before the job
	@JsonProperty("PreExec")
	public ArrayList<String> PreExec;

	//Custom commands to run after taking a disk snapshot
	@JsonProperty("ThawExec")
	public ArrayList<String> ThawExec;

	//Custom commands to run after the job
	@JsonProperty("PostExec")
	public ArrayList<String> PostExec;

	//The source Protected Item ID to back up from, during this schedule
	@JsonProperty("Source")
	public String Source = "";

	//The destination Storage Vault ID to back up to, during this schedule
	@JsonProperty("Destination")
	public String Destination = "";

	@JsonProperty("SkipAlreadyRunning")
	public boolean SkipAlreadyRunning;

	//If Zero: disabled
	@JsonProperty("StopAfter")
	public long StopAfter;

	//If Zero: disabled
	@JsonProperty("LimitVaultSpeedBps")
	public long LimitVaultSpeedBps;

	//Default disabled
	@JsonProperty("ReduceDiskConcurrency")
	public boolean ReduceDiskConcurrency;

	//Default disabled
	@JsonProperty("UseOnDiskIndexes")
	public boolean UseOnDiskIndexes;

	//Default disabled
	@JsonProperty("AllowZeroFilesSuccess")
	public boolean AllowZeroFilesSuccess;

	//If Zero: default Automatic (BACKUPJOBAUTORETENTION_AUTOMATIC)
	@JsonProperty("AutoRetentionLevel")
	public long AutoRetentionLevel;

	@JsonProperty("LogLevel")
	public String LogLevel = "";

	//Scheduled start times
	@JsonProperty("Schedules")
	public ArrayList<ScheduleConfig> Schedules;

	//Other events that will cause this scheduled job to start
	@JsonProperty("EventTriggers")
	public BackupRuleEventTriggers EventTriggers;


	public BackupRuleConfig(){ }

	/**
	* @return JSON representation of the BackupRuleConfig
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	/**
	* @param jsStr JSON representation of a BackupRuleConfig
	* @return The deserialized BackupRuleConfig
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	static public BackupRuleConfig fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,BackupRuleConfig.class);
	}

	/**
	* @return Returns a copy of the embedded BackupJobAdvancedOptions
	*/
	public BackupJobAdvancedOptions GetEmbeddedBackupJobAdvancedOptions(){
		var ret = new BackupJobAdvancedOptions();
		ret.SkipAlreadyRunning = this.SkipAlreadyRunning;
		ret.StopAfter = this.StopAfter;
		ret.LimitVaultSpeedBps = this.LimitVaultSpeedBps;
		ret.ReduceDiskConcurrency = this.ReduceDiskConcurrency;
		ret.UseOnDiskIndexes = this.UseOnDiskIndexes;
		ret.AllowZeroFilesSuccess = this.AllowZeroFilesSuccess;
		ret.AutoRetentionLevel = this.AutoRetentionLevel;
		ret.LogLevel = this.LogLevel;
		return ret;
	}
	public void SetEmbeddedBackupJobAdvancedOptions(BackupJobAdvancedOptions other){
		this.SkipAlreadyRunning = other.SkipAlreadyRunning;
		this.StopAfter = other.StopAfter;
		this.LimitVaultSpeedBps = other.LimitVaultSpeedBps;
		this.ReduceDiskConcurrency = other.ReduceDiskConcurrency;
		this.UseOnDiskIndexes = other.UseOnDiskIndexes;
		this.AllowZeroFilesSuccess = other.AllowZeroFilesSuccess;
		this.AutoRetentionLevel = other.AutoRetentionLevel;
		this.LogLevel = other.LogLevel;
	}

}
