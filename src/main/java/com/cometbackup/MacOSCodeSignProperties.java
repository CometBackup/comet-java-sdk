
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* MacOSCodeSignProperties
*/
public class MacOSCodeSignProperties {
	//One of the MACOSCODESIGN_LEVEL_ constants
	@JsonProperty("Level")
	public int Level;

	@JsonProperty("SignLocally")
	public boolean SignLocally;

	@JsonProperty("SSHServer")
	public SSHConnection SSHServer;

	//"Developer ID Installer" certificate, either a local filepath or a resource:// URI. Used for signing the final flat
	//*.pkg.
	@JsonProperty("CertificateName")
	public String CertificateName = "";

	//"Developer ID Application" certificate, either a local filepath or a resource:// URI. Used for signing internal
	//binaries if Notary is enabled
	@JsonProperty("AppCertificateName")
	public String AppCertificateName = "";

	@JsonProperty("AppleID")
	public String AppleID = "";

	@JsonProperty("AppleIDPass")
	public String AppleIDPass = "";

	//One of the ENCRYPTIONMETHOD_ constants
	@JsonProperty("AppleIDPassFormat")
	public long AppleIDPassFormat;

	@JsonProperty("CertificateFile")
	public String CertificateFile = "";

	@JsonProperty("AppCertificateFile")
	public String AppCertificateFile = "";

	@JsonProperty("PfxFilePassword")
	public String PfxFilePassword = "";

	//One of the ENCRYPTIONMETHOD_ constants
	@JsonProperty("PfxFilePasswordFormat")
	public long PfxFilePasswordFormat;

	@JsonProperty("NotaryAPIIssuerID")
	public String NotaryAPIIssuerID = "";

	@JsonProperty("NotaryAPIKeyID")
	public String NotaryAPIKeyID = "";

	@JsonProperty("NotaryAPIKeyFile")
	public String NotaryAPIKeyFile = "";


	public MacOSCodeSignProperties(){ }

	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	static public MacOSCodeSignProperties fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,MacOSCodeSignProperties.class);
	}

}
