
// AUTOGENERATED, DO NOT EDIT\n\n"
package com.cometbackup;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.util.*;

/**
* Partition
*/
public class Partition {
	@JsonProperty("DeviceName")
	public String DeviceName = "";

	//The name of the filesystem used on this partition (e.g. "NTFS")
	@JsonProperty("Filesystem")
	public String Filesystem = "";

	@JsonProperty("VolumeName")
	public String VolumeName = "";

	@JsonProperty("VolumeGuid")
	public String VolumeGuid = "";

	@JsonProperty("VolumeSerial")
	public String VolumeSerial = "";

	@JsonProperty("MountPoints")
	public ArrayList<String> MountPoints;

	//Bytes. The partition's offset within the DeviceName. It will be zero if this partition has a direct DeviceName
	//handle.
	@JsonProperty("ReadOffset")
	public long ReadOffset;

	//Bytes
	@JsonProperty("Size")
	public long Size;

	//Bytes. Only present for supported filesystems that are currently mounted by the OS
	@JsonProperty("UsedSize")
	public long UsedSize;

	@JsonProperty("Flags")
	public long Flags;

	@JsonProperty("BytesPerFilesystemCluster")
	public long BytesPerFilesystemCluster;


	public Partition(){ }

	/**
	* @return JSON representation of the Partition
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	public String toJson() throws JsonProcessingException {
		return CometAPI.getObjectMapper().writeValueAsString(this);
	}

	/**
	* @param jsStr JSON representation of a Partition
	* @return The deserialized Partition
	* @throws JsonProcessingException If JSON is malformed (should not happen)
	*/
	static public Partition fromJson(String jsStr) throws JsonProcessingException {
		return CometAPI.getObjectMapper().readValue(jsStr,Partition.class);
	}

}
